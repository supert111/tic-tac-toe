// // –°—Ç–≤–æ—Ä–∏–≤ src/utils/gameUtils.ts –∑ —É—Å—ñ–º–∞ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —É—Ç–∏–ª—ñ—Ç–∞–º–∏ –¥–ª—è –≥—Ä–∏!
// // –©–æ –≤–∫–ª—é—á–µ–Ω–æ:
// // üéØ –û—Å–Ω–æ–≤–Ω–∞ —ñ–≥—Ä–æ–≤–∞ –ª–æ–≥—ñ–∫–∞:

// // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ—à–∫–∏
// // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–º–æ–≤ –ø–µ—Ä–µ–º–æ–≥–∏
// // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Ç–∞ –Ω—ñ—á–∏—ó
// // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ö–æ–¥—ñ–≤

// // ü§ñ AI –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤
// // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
// // –†–æ–±–æ—Ç–∞ –∑ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é AI

// // ‚è±Ô∏è –¢–∞–π–º–µ—Ä —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:

// // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// // –ö–æ–ª—ñ—Ä —Ç–∞–π–º–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É
// // –í—ñ–¥—Å–æ—Ç–∫–∏ —á–∞—Å—É

// // üéÆ –ó–∞–≥–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏:

// // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID –¥–ª—è —ñ–≥–æ—Ä —Ç–∞ –∫—ñ–º–Ω–∞—Ç
// // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–≤–æ–∫ —Ç–∞ –Ω–∞–∑–≤ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
// // –†–æ–±–æ—Ç–∞ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–æ—à–∫–∏

// // üõ†Ô∏è Debug —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ:

// // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ—à–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
// // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—à–æ–∫
// // –•–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è

// // –ü–µ—Ä–µ–≤–∞–≥–∏:
// // ‚úÖ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó pure - –Ω–µ –º–∞—é—Ç—å –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
// // ‚úÖ –¢–∏–ø—ñ–∑–æ–≤–∞–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç–∏–ø–∏ –∑ types/game.ts
// // ‚úÖ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ - –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
// // ‚úÖ –¢–µ—Å—Ç—É—î—Ç—å—Å—è - –ª–µ–≥–∫–æ –ø–æ–∫—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–∞–º–∏
// // ‚úÖ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ - –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ AI, PvP, Tournament




// import type { 
//     BoardSize, 
//     CellValue, 
//     Player, 
//     Difficulty,
//     FirstMove,
//     PvPFirstMove 
//   } from '../types/game';
  
//   import {
//     // BOARD_SIZES,
//     PLAYER_SYMBOLS,
//     AI_DIFFICULTY_LABELS,
//     AI_DIFFICULTY_COLORS,
//     GAME_LABELS
//   } from '../constants/game';
  
//   /**
//    * –°—Ç–≤–æ—Ä—é—î –ø–æ—Ä–æ–∂–Ω—é –¥–æ—à–∫—É –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
//    */
//   export function createEmptyBoard(size: BoardSize): CellValue[] {
//     return new Array(size * size).fill('');
//   }
  
//   /**
//    * –ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏ –Ω–∞ –¥–æ—à—Ü—ñ –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
//    */
//   export function generateWinningConditions(size: BoardSize): number[][] {
//     const conditions: number[][] = [];
    
//     // –†—è–¥–∫–∏ (3 –≤ —Ä—è–¥)
//     for (let row = 0; row < size; row++) {
//       for (let col = 0; col <= size - 3; col++) {
//         conditions.push([
//           row * size + col,
//           row * size + col + 1,
//           row * size + col + 2
//         ]);
//       }
//     }
    
//     // –°—Ç–æ–≤–ø—Ü—ñ (3 –≤ —Ä—è–¥)
//     for (let col = 0; col < size; col++) {
//       for (let row = 0; row <= size - 3; row++) {
//         conditions.push([
//           row * size + col,
//           (row + 1) * size + col,
//           (row + 2) * size + col
//         ]);
//       }
//     }
    
//     // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
//     for (let row = 0; row <= size - 3; row++) {
//       for (let col = 0; col <= size - 3; col++) {
//         conditions.push([
//           row * size + col,
//           (row + 1) * size + col + 1,
//           (row + 2) * size + col + 2
//         ]);
//       }
//     }
    
//     // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ
//     for (let row = 0; row <= size - 3; row++) {
//       for (let col = 2; col < size; col++) {
//         conditions.push([
//           row * size + col,
//           (row + 1) * size + col - 1,
//           (row + 2) * size + col - 2
//         ]);
//       }
//     }
    
//     return conditions;
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å –Ω–∞ –¥–æ—à—Ü—ñ
//    */
//   export function checkWinner(
//     board: CellValue[], 
//     winningConditions: number[][]
//   ): { winner: Player | null; winningLine: number[] } {
//     for (const [a, b, c] of winningConditions) {
//       if (board[a] && board[a] === board[b] && board[a] === board[c]) {
//         return {
//           winner: board[a] as Player,
//           winningLine: [a, b, c]
//         };
//       }
//     }
    
//     return { winner: null, winningLine: [] };
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—à–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ (–Ω—ñ—á–∏—è)
//    */
//   export function isBoardFull(board: CellValue[]): boolean {
//     return !board.includes('');
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
//    */
//   export function isGameFinished(
//     board: CellValue[], 
//     winningConditions: number[][]
//   ): { finished: boolean; winner: Player | null; isDraw: boolean; winningLine: number[] } {
//     const { winner, winningLine } = checkWinner(board, winningConditions);
    
//     if (winner) {
//       return { finished: true, winner, isDraw: false, winningLine };
//     }
    
//     if (isBoardFull(board)) {
//       return { finished: true, winner: null, isDraw: true, winningLine: [] };
//     }
    
//     return { finished: false, winner: null, isDraw: false, winningLine: [] };
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
//    */
//   export function getOppositePlayer(player: Player): Player {
//     return player === PLAYER_SYMBOLS.X ? PLAYER_SYMBOLS.O : PLAYER_SYMBOLS.X;
//   }
  
//   /**
//    * –í–∏–∑–Ω–∞—á–∞—î —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º
//    */
//   export function determineFirstPlayer(
//     firstMove: FirstMove | PvPFirstMove,
//     playerSymbol: Player,
//     aiSymbol?: Player
//   ): Player {
//     switch (firstMove) {
//       case 'player':
//       case 'creator':
//         return playerSymbol;
//       case 'ai':
//       case 'opponent':
//         return aiSymbol || getOppositePlayer(playerSymbol);
//       case 'random':
//         return Math.random() < 0.5 ? PLAYER_SYMBOLS.X : PLAYER_SYMBOLS.O;
//       default:
//         return PLAYER_SYMBOLS.X;
//     }
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ö—ñ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π
//    */
//   export function isValidMove(board: CellValue[], index: number): boolean {
//     return index >= 0 && index < board.length && board[index] === '';
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏
//    */
//   export function getAvailableMoves(board: CellValue[]): number[] {
//     return board
//       .map((cell, index) => cell === '' ? index : -1)
//       .filter(index => index !== -1);
//   }
  
//   /**
//    * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ö—ñ–¥ –¥–æ –¥–æ—à–∫–∏
//    */
//   export function makeMove(board: CellValue[], index: number, player: Player): CellValue[] {

//   // üîç –î–û–î–ê–ô–¢–ï –¶–ï–ô –õ–û–ì
//   console.log('üéØ makeMove –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', { 
//     index, 
//     player, 
//     beforeBoard: [...board], 
//     cellValue: board[index] 
//   });

//     if (board[index] !== '') {
//       console.warn('‚ö†Ô∏è –°–ø—Ä–æ–±–∞ —Ö–æ–¥—É –≤ –∑–∞–π–Ω—è—Ç—É –∫–ª—ñ—Ç–∏–Ω–∫—É!');
//       return board; // –ê–±–æ throw error
//     }

//     if (!isValidMove(board, index)) {
//       throw new Error(`Invalid move at index ${index}`);
//     }
    
//     const newBoard = [...board];
//     newBoard[index] = player;
//     console.log('‚úÖ makeMove —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', [...newBoard]);
//     return newBoard;
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ AI
//    */
//   export function getDifficultyName(difficulty: Difficulty): string {
//     return AI_DIFFICULTY_LABELS[difficulty];
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –∫–æ–ª—ñ—Ä –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ AI
//    */
//   export function getDifficultyColor(difficulty: Difficulty): string {
//     return AI_DIFFICULTY_COLORS[difficulty];
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É —Å–∏–º–≤–æ–ª—É
//    */
//   export function getSymbolName(symbol: Player): string {
//     return GAME_LABELS.SYMBOLS[symbol];
//   }
  
//   /**
//    * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –≥—Ä–∏
//    */
//   export function generateGameId(): string {
//     return `game_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
//   }
  
//   /**
//    * –ì–µ–Ω–µ—Ä—É—î ID –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ PvP
//    */
//   export function generateRoomId(): number {
//     return Math.floor(Math.random() * 9000) + 1000; // 1000-9999
//   }
  
//   /**
//    * –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å –≤ —Ö–≤–∏–ª–∏–Ω–∏:—Å–µ–∫—É–Ω–¥–∏
//    */
//   export function formatTime(seconds: number): string {
//     const mins = Math.floor(seconds / 60);
//     const secs = seconds % 60;
//     return `${mins}:${secs.toString().padStart(2, '0')}`;
//   }
  
//   /**
//    * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
//    */
//   export function getTimePercentage(timeLeft: number, maxTime: number): number {
//     return Math.max(0, Math.min(100, (timeLeft / maxTime) * 100));
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –∫–æ–ª—ñ—Ä —Ç–∞–π–º–µ—Ä–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
//    */
//   export function getTimerColor(timeLeft: number, maxTime: number): 'normal' | 'warning' | 'danger' {
//     const percentage = getTimePercentage(timeLeft, maxTime);
    
//     if (percentage <= 32) return 'danger';   // ‚â§ 7 —Å–µ–∫—É–Ω–¥ –∑ 22
//     if (percentage <= 68) return 'warning';  // ‚â§ 15 —Å–µ–∫—É–Ω–¥ –∑ 22
//     return 'normal';
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ä—è–¥–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –¥–ª—è —Å—Ç–∞–≤–∫–∏
//    */
//   export function isValidStake(stake: string): boolean {
//     const num = parseFloat(stake);
//     return !isNaN(num) && num >= 0.01 && num <= 1000;
//   }
  
//   /**
//    * –§–æ—Ä–º–∞—Ç—É—î —Å—É–º—É —Å—Ç–∞–≤–∫–∏
//    */
//   export function formatStake(stake: number): string {
//     return stake === 0 ? '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ' : `${stake} XTZ`;
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–∞–∑–≤–∞ —Ç—É—Ä–Ω—ñ—Ä—É –≤–∞–ª—ñ–¥–Ω–∞
//    */
//   export function isValidTournamentName(name: string): boolean {
//     return name.length >= 3 && name.length <= 50 && name.trim().length > 0;
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
//    */
//   export function getFilledCellsCount(board: CellValue[]): number {
//     return board.filter(cell => cell !== '').length;
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∏ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å X —Ç–∞ O)
//    */
//   export function getBoardStats(board: CellValue[]): { x: number; o: number; empty: number } {
//     return {
//       x: board.filter(cell => cell === PLAYER_SYMBOLS.X).length,
//       o: board.filter(cell => cell === PLAYER_SYMBOLS.O).length,
//       empty: board.filter(cell => cell === '').length
//     };
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—à–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
//    */
//   export function isEmpty(board: CellValue[]): boolean {
//     return board.every(cell => cell === '');
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –ø–æ–∑–∏—Ü—ñ—é –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä—è–¥–æ–∫/—Å—Ç–æ–≤–ø–µ—Ü—å
//    */
//   export function getRowCol(index: number, size: BoardSize): { row: number; col: number } {
//     return {
//       row: Math.floor(index / size),
//       col: index % size
//     };
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î —ñ–Ω–¥–µ–∫—Å –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä—è–¥–æ–∫/—Å—Ç–æ–≤–ø–µ—Ü—å
//    */
//   export function getIndex(row: number, col: number, size: BoardSize): number {
//     return row * size + col;
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ –¥–æ—à–∫–∏
//    */
//   export function isCenterCell(index: number, size: BoardSize): boolean {
//     const center = Math.floor(size / 2);
//     const { row, col } = getRowCol(index, size);
//     return row === center && col === center;
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –∫—É—Ç–æ–≤—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ—à–∫–∏
//    */
//   export function getCornerCells(size: BoardSize): number[] {
//     return [
//       0,                           // –≤–µ—Ä—Ö–Ω—ñ–π –ª—ñ–≤–∏–π
//       size - 1,                    // –≤–µ—Ä—Ö–Ω—ñ–π –ø—Ä–∞–≤–∏–π
//       size * (size - 1),           // –Ω–∏–∂–Ω—ñ–π –ª—ñ–≤–∏–π
//       size * size - 1              // –Ω–∏–∂–Ω—ñ–π –ø—Ä–∞–≤–∏–π
//     ];
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∫—É—Ç–æ–≤–∞
//    */
//   export function isCornerCell(index: number, size: BoardSize): boolean {
//     return getCornerCells(size).includes(index);
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ –∫—Ä–∞—è—Ö –¥–æ—à–∫–∏
//    */
//   export function getEdgeCells(size: BoardSize): number[] {
//     const edges: number[] = [];
    
//     // –í–µ—Ä—Ö–Ω—ñ–π —Ç–∞ –Ω–∏–∂–Ω—ñ–π –∫—Ä–∞–π
//     for (let col = 1; col < size - 1; col++) {
//       edges.push(col);                    // –≤–µ—Ä—Ö–Ω—ñ–π –∫—Ä–∞–π
//       edges.push((size - 1) * size + col); // –Ω–∏–∂–Ω—ñ–π –∫—Ä–∞–π
//     }
    
//     // –õ—ñ–≤–∏–π —Ç–∞ –ø—Ä–∞–≤–∏–π –∫—Ä–∞–π
//     for (let row = 1; row < size - 1; row++) {
//       edges.push(row * size);             // –ª—ñ–≤–∏–π –∫—Ä–∞–π
//       edges.push(row * size + size - 1);  // –ø—Ä–∞–≤–∏–π –∫—Ä–∞–π
//     }
    
//     return edges;
//   }
  
//   /**
//    * –°—Ç–≤–æ—Ä—é—î –∫–æ–ø—ñ—é –¥–æ—à–∫–∏
//    */
//   export function cloneBoard(board: CellValue[]): CellValue[] {
//     return [...board];
//   }
  
//   /**
//    * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–≤—ñ –¥–æ—à–∫–∏ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ
//    */
//   export function areBoardsEqual(board1: CellValue[], board2: CellValue[]): boolean {
//     return board1.length === board2.length && 
//            board1.every((cell, index) => cell === board2[index]);
//   }
  
//   /**
//    * –û—Ç—Ä–∏–º—É—î —Ö–µ—à –¥–æ—à–∫–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
//    */
//   export function getBoardHash(board: CellValue[]): string {
//     return board.join('');
//   }
  
//   /**
//    * –û—á–∏—â–∞—î –¥–æ—à–∫—É
//    */
//   export function clearBoard(size: BoardSize): CellValue[] {
//     return createEmptyBoard(size);
//   }
  
//   /**
//    * Debug —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—à–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
//    */
//   export function logBoard(board: CellValue[], size: BoardSize): void {
//     console.log('Game Board:');
//     for (let row = 0; row < size; row++) {
//       const rowData = [];
//       for (let col = 0; col < size; col++) {
//         const cell = board[row * size + col];
//         rowData.push(cell || '¬∑');
//       }
//       console.log(rowData.join(' | '));
//     }
//     console.log('---');
//   }



























// –°—Ç–≤–æ—Ä–∏–≤ src/utils/gameUtils.ts –∑ —É—Å—ñ–º–∞ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —É—Ç–∏–ª—ñ—Ç–∞–º–∏ –¥–ª—è –≥—Ä–∏!
// –©–æ –≤–∫–ª—é—á–µ–Ω–æ:
// üéØ –û—Å–Ω–æ–≤–Ω–∞ —ñ–≥—Ä–æ–≤–∞ –ª–æ–≥—ñ–∫–∞:

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ—à–∫–∏
// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–º–æ–≤ –ø–µ—Ä–µ–º–æ–≥–∏
// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Ç–∞ –Ω—ñ—á–∏—ó
// –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ö–æ–¥—ñ–≤

// ü§ñ AI –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤
// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
// –†–æ–±–æ—Ç–∞ –∑ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é AI

// ‚è±Ô∏è –¢–∞–π–º–µ—Ä —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// –ö–æ–ª—ñ—Ä —Ç–∞–π–º–µ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É
// –í—ñ–¥—Å–æ—Ç–∫–∏ —á–∞—Å—É

// üéÆ –ó–∞–≥–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏:

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID –¥–ª—è —ñ–≥–æ—Ä —Ç–∞ –∫—ñ–º–Ω–∞—Ç
// –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–≤–æ–∫ —Ç–∞ –Ω–∞–∑–≤ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
// –†–æ–±–æ—Ç–∞ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–æ—à–∫–∏

// üõ†Ô∏è Debug —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ:

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ—à–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
// –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—à–æ–∫
// –•–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è

// –ü–µ—Ä–µ–≤–∞–≥–∏:
// ‚úÖ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó pure - –Ω–µ –º–∞—é—Ç—å –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
// ‚úÖ –¢–∏–ø—ñ–∑–æ–≤–∞–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç–∏–ø–∏ –∑ types/game.ts
// ‚úÖ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ - –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
// ‚úÖ –¢–µ—Å—Ç—É—î—Ç—å—Å—è - –ª–µ–≥–∫–æ –ø–æ–∫—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–∞–º–∏
// ‚úÖ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ - –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ AI, PvP, Tournament




import type { 
  BoardSize, 
  CellValue, 
  Player, 
  Difficulty,
  FirstMove,
  PvPFirstMove,
  RestrictedCells, 
  CellIndex, 
  MoveValidation, 
  RestrictionInfo,
  GameRules
} from '../types/game';

import {
  // BOARD_SIZES,
  PLAYER_SYMBOLS,
  AI_DIFFICULTY_LABELS,
  AI_DIFFICULTY_COLORS,
  GAME_LABELS
} from '../constants/game';

import { translations, type Language } from '../lib/i18n/translations';

/**
 * –°—Ç–≤–æ—Ä—é—î –ø–æ—Ä–æ–∂–Ω—é –¥–æ—à–∫—É –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
 */
export function createEmptyBoard(size: BoardSize): CellValue[] {
  return new Array(size * size).fill('');
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏ –Ω–∞ –¥–æ—à—Ü—ñ –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
 */
export function generateWinningConditions(size: BoardSize): number[][] {
  const conditions: number[][] = [];
  
  // –†—è–¥–∫–∏ (3 –≤ —Ä—è–¥)
  for (let row = 0; row < size; row++) {
    for (let col = 0; col <= size - 3; col++) {
      conditions.push([
        row * size + col,
        row * size + col + 1,
        row * size + col + 2
      ]);
    }
  }
  
  // –°—Ç–æ–≤–ø—Ü—ñ (3 –≤ —Ä—è–¥)
  for (let col = 0; col < size; col++) {
    for (let row = 0; row <= size - 3; row++) {
      conditions.push([
        row * size + col,
        (row + 1) * size + col,
        (row + 2) * size + col
      ]);
    }
  }
  
  // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
  for (let row = 0; row <= size - 3; row++) {
    for (let col = 0; col <= size - 3; col++) {
      conditions.push([
        row * size + col,
        (row + 1) * size + col + 1,
        (row + 2) * size + col + 2
      ]);
    }
  }
  
  // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ
  for (let row = 0; row <= size - 3; row++) {
    for (let col = 2; col < size; col++) {
      conditions.push([
        row * size + col,
        (row + 1) * size + col - 1,
        (row + 2) * size + col - 2
      ]);
    }
  }
  
   // –î–û–î–ê–¢–ò –í –ö–Ü–ù–ï–¶–¨ –§–£–ù–ö–¶–Ü–á:
   if (size === 4) {
    console.log('üéØ –ó–ì–ï–ù–ï–†–û–í–ê–ù–Ü –£–ú–û–í–ò –ü–ï–†–ï–ú–û–ì–ò –¥–ª—è 4√ó4:', conditions);
    console.log('üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–º–æ–≤:', conditions.length);
  }

  return conditions;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å –Ω–∞ –¥–æ—à—Ü—ñ
 */
export function checkWinner(
  board: CellValue[], 
  winningConditions: number[][]
): { winner: Player | null; winningLine: number[] } {
  for (const [a, b, c] of winningConditions) {
    if (board[a] && board[a] === board[b] && board[a] === board[c]) {
      return {
        winner: board[a] as Player,
        winningLine: [a, b, c]
      };
    }
  }
  
  return { winner: null, winningLine: [] };
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—à–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ (–Ω—ñ—á–∏—è)
 */
export function isBoardFull(board: CellValue[]): boolean {
  return !board.includes('');
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
 */
export function isGameFinished(
  board: CellValue[], 
  winningConditions: number[][]
): { finished: boolean; winner: Player | null; isDraw: boolean; winningLine: number[] } {
  const { winner, winningLine } = checkWinner(board, winningConditions);
  
  if (winner) {
    return { finished: true, winner, isDraw: false, winningLine };
  }
  
  if (isBoardFull(board)) {
    return { finished: true, winner: null, isDraw: true, winningLine: [] };
  }
  
  return { finished: false, winner: null, isDraw: false, winningLine: [] };
}

/**
 * –û—Ç—Ä–∏–º—É—î –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
 */
export function getOppositePlayer(player: Player): Player {
  return player === PLAYER_SYMBOLS.X ? PLAYER_SYMBOLS.O : PLAYER_SYMBOLS.X;
}

/**
 * –í–∏–∑–Ω–∞—á–∞—î —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º
 */
export function determineFirstPlayer(
  firstMove: FirstMove | PvPFirstMove,
  playerSymbol: Player,
  aiSymbol?: Player
): Player {
  switch (firstMove) {
    case 'player':
    case 'creator':
      return playerSymbol;
    case 'ai':
    case 'opponent':
      return aiSymbol || getOppositePlayer(playerSymbol);
    case 'random':
      return Math.random() < 0.5 ? PLAYER_SYMBOLS.X : PLAYER_SYMBOLS.O;
    default:
      return PLAYER_SYMBOLS.X;
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ö—ñ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π
 */
export function isValidMove(board: CellValue[], index: number): boolean {
  return index >= 0 && index < board.length && board[index] === '';
}

/**
 * –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏
 */
export function getAvailableMoves(board: CellValue[]): number[] {
  return board
    .map((cell, index) => cell === '' ? index : -1)
    .filter(index => index !== -1);
}

/**
 * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ö—ñ–¥ –¥–æ –¥–æ—à–∫–∏
 */
export function makeMove(board: CellValue[], index: number, player: Player): CellValue[] {

// üîç –î–û–î–ê–ô–¢–ï –¶–ï–ô –õ–û–ì
console.log('üéØ makeMove –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', { 
  index, 
  player, 
  beforeBoard: [...board], 
  cellValue: board[index] 
});

  if (board[index] !== '') {
    console.warn('‚ö†Ô∏è –°–ø—Ä–æ–±–∞ —Ö–æ–¥—É –≤ –∑–∞–π–Ω—è—Ç—É –∫–ª—ñ—Ç–∏–Ω–∫—É!');
    return board; // –ê–±–æ throw error
  }

  if (!isValidMove(board, index)) {
    throw new Error(`Invalid move at index ${index}`);
  }
  
  const newBoard = [...board];
  newBoard[index] = player;
  console.log('‚úÖ makeMove —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', [...newBoard]);
  return newBoard;
}

/**
 * –û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ AI
 */
export function getDifficultyName(difficulty: Difficulty): string {
  return AI_DIFFICULTY_LABELS[difficulty];
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫–æ–ª—ñ—Ä –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ AI
 */
export function getDifficultyColor(difficulty: Difficulty): string {
  return AI_DIFFICULTY_COLORS[difficulty];
}

/**
 * –û—Ç—Ä–∏–º—É—î –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É —Å–∏–º–≤–æ–ª—É
 */
export function getSymbolName(symbol: Player): string {
  return GAME_LABELS.SYMBOLS[symbol];
}

/**
 * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –≥—Ä–∏
 */
export function generateGameId(): string {
  return `game_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î ID –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ PvP
 */
export function generateRoomId(): number {
  return Math.floor(Math.random() * 9000) + 1000; // 1000-9999
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å –≤ —Ö–≤–∏–ª–∏–Ω–∏:—Å–µ–∫—É–Ω–¥–∏
 */
export function formatTime(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

/**
 * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
 */
export function getTimePercentage(timeLeft: number, maxTime: number): number {
  return Math.max(0, Math.min(100, (timeLeft / maxTime) * 100));
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫–æ–ª—ñ—Ä —Ç–∞–π–º–µ—Ä–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
 */
export function getTimerColor(timeLeft: number, maxTime: number): 'normal' | 'warning' | 'danger' {
  const percentage = getTimePercentage(timeLeft, maxTime);
  
  if (percentage <= 32) return 'danger';   // ‚â§ 7 —Å–µ–∫—É–Ω–¥ –∑ 22
  if (percentage <= 68) return 'warning';  // ‚â§ 15 —Å–µ–∫—É–Ω–¥ –∑ 22
  return 'normal';
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ä—è–¥–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –¥–ª—è —Å—Ç–∞–≤–∫–∏
 */
export function isValidStake(stake: string): boolean {
  const num = parseFloat(stake);
  return !isNaN(num) && num >= 0.01 && num <= 1000;
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î —Å—É–º—É —Å—Ç–∞–≤–∫–∏
 */
export function formatStake(stake: number): string {
  return stake === 0 ? '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ' : `${stake} XTZ`;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–∞–∑–≤–∞ —Ç—É—Ä–Ω—ñ—Ä—É –≤–∞–ª—ñ–¥–Ω–∞
 */
export function isValidTournamentName(name: string): boolean {
  return name.length >= 3 && name.length <= 50 && name.trim().length > 0;
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
 */
export function getFilledCellsCount(board: CellValue[]): number {
  return board.filter(cell => cell !== '').length;
}

/**
 * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∏ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å X —Ç–∞ O)
 */
export function getBoardStats(board: CellValue[]): { x: number; o: number; empty: number } {
  return {
    x: board.filter(cell => cell === PLAYER_SYMBOLS.X).length,
    o: board.filter(cell => cell === PLAYER_SYMBOLS.O).length,
    empty: board.filter(cell => cell === '').length
  };
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—à–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
 */
export function isEmpty(board: CellValue[]): boolean {
  return board.every(cell => cell === '');
}

/**
 * –û—Ç—Ä–∏–º—É—î –ø–æ–∑–∏—Ü—ñ—é –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä—è–¥–æ–∫/—Å—Ç–æ–≤–ø–µ—Ü—å
 */
export function getRowCol(index: number, size: BoardSize): { row: number; col: number } {
  return {
    row: Math.floor(index / size),
    col: index % size
  };
}

/**
 * –û—Ç—Ä–∏–º—É—î —ñ–Ω–¥–µ–∫—Å –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä—è–¥–æ–∫/—Å—Ç–æ–≤–ø–µ—Ü—å
 */
export function getIndex(row: number, col: number, size: BoardSize): number {
  return row * size + col;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ –¥–æ—à–∫–∏
 */
export function isCenterCell(index: number, size: BoardSize): boolean {
  const center = Math.floor(size / 2);
  const { row, col } = getRowCol(index, size);
  return row === center && col === center;
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫—É—Ç–æ–≤—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ—à–∫–∏
 */
export function getCornerCells(size: BoardSize): number[] {
  return [
    0,                           // –≤–µ—Ä—Ö–Ω—ñ–π –ª—ñ–≤–∏–π
    size - 1,                    // –≤–µ—Ä—Ö–Ω—ñ–π –ø—Ä–∞–≤–∏–π
    size * (size - 1),           // –Ω–∏–∂–Ω—ñ–π –ª—ñ–≤–∏–π
    size * size - 1              // –Ω–∏–∂–Ω—ñ–π –ø—Ä–∞–≤–∏–π
  ];
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∫—É—Ç–æ–≤–∞
 */
export function isCornerCell(index: number, size: BoardSize): boolean {
  return getCornerCells(size).includes(index);
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ –∫—Ä–∞—è—Ö –¥–æ—à–∫–∏
 */
export function getEdgeCells(size: BoardSize): number[] {
  const edges: number[] = [];
  
  // –í–µ—Ä—Ö–Ω—ñ–π —Ç–∞ –Ω–∏–∂–Ω—ñ–π –∫—Ä–∞–π
  for (let col = 1; col < size - 1; col++) {
    edges.push(col);                    // –≤–µ—Ä—Ö–Ω—ñ–π –∫—Ä–∞–π
    edges.push((size - 1) * size + col); // –Ω–∏–∂–Ω—ñ–π –∫—Ä–∞–π
  }
  
  // –õ—ñ–≤–∏–π —Ç–∞ –ø—Ä–∞–≤–∏–π –∫—Ä–∞–π
  for (let row = 1; row < size - 1; row++) {
    edges.push(row * size);             // –ª—ñ–≤–∏–π –∫—Ä–∞–π
    edges.push(row * size + size - 1);  // –ø—Ä–∞–≤–∏–π –∫—Ä–∞–π
  }
  
  return edges;
}

/**
 * –°—Ç–≤–æ—Ä—é—î –∫–æ–ø—ñ—é –¥–æ—à–∫–∏
 */
export function cloneBoard(board: CellValue[]): CellValue[] {
  return [...board];
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–≤—ñ –¥–æ—à–∫–∏ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ
 */
export function areBoardsEqual(board1: CellValue[], board2: CellValue[]): boolean {
  return board1.length === board2.length && 
         board1.every((cell, index) => cell === board2[index]);
}

/**
 * –û—Ç—Ä–∏–º—É—î —Ö–µ—à –¥–æ—à–∫–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
 */
export function getBoardHash(board: CellValue[]): string {
  return board.join('');
}

/**
 * –û—á–∏—â–∞—î –¥–æ—à–∫—É
 */
export function clearBoard(size: BoardSize): CellValue[] {
  return createEmptyBoard(size);
}

/**
 * Debug —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—à–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export function logBoard(board: CellValue[], size: BoardSize): void {
  console.log('Game Board:');
  for (let row = 0; row < size; row++) {
    const rowData = [];
    for (let col = 0; col < size; col++) {
      const cell = board[row * size + col];
      rowData.push(cell || '¬∑');
    }
    console.log(rowData.join(' | '));
  }
  console.log('---');
}









// ================================
// –î–û–î–ê–¢–ò –¶–ï–ô –ö–û–î –í –ö–Ü–ù–ï–¶–¨ –§–ê–ô–õ–£ src/utils/gameUtils.ts
// ================================

// –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Ç–∏–ø—ñ–≤ (–¥–æ–¥–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤)
// import type { 
//   RestrictedCells, 
//   CellIndex, 
//   MoveValidation, 
//   RestrictionInfo,
//   GameRules
// } from '../lib/types/game';

// === –§–£–ù–ö–¶–Ü–á –î–õ–Ø 4√ó4 –û–ë–ú–ï–ñ–ï–ù–¨ ===

/**
 * –û—Ç—Ä–∏–º—É—î —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
 */
export function getAdjacentCells(cellIndex: CellIndex, boardSize: BoardSize): CellIndex[] {
  const { row, col } = getRowCol(cellIndex, boardSize);
  const adjacent: CellIndex[] = [];
  
  // –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏: –≤–≥–æ—Ä—É, –≤–Ω–∏–∑, –≤–ª—ñ–≤–æ, –≤–ø—Ä–∞–≤–æ, –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
  const directions = [
    [-1, -1], [-1, 0], [-1, 1],  // –≤–≥–æ—Ä—É-–ª—ñ–≤–æ, –≤–≥–æ—Ä—É, –≤–≥–æ—Ä—É-–ø—Ä–∞–≤–æ
    [0, -1],           [0, 1],   // –ª—ñ–≤–æ, –ø—Ä–∞–≤–æ
    [1, -1],  [1, 0],  [1, 1]    // –≤–Ω–∏–∑-–ª—ñ–≤–æ, –≤–Ω–∏–∑, –≤–Ω–∏–∑-–ø—Ä–∞–≤–æ
  ];
  
  for (const [deltaRow, deltaCol] of directions) {
    const newRow = row + deltaRow;
    const newCol = col + deltaCol;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏
    if (newRow >= 0 && newRow < boardSize && newCol >= 0 && newCol < boardSize) {
      adjacent.push(getIndex(newRow, newCol, boardSize));
    }
  }
  
  return adjacent;
}

/**
 * –û—Ç—Ä–∏–º—É—î –æ–±–º–µ–∂–µ–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
 * –û–ù–û–í–õ–ï–ù–û: –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∏–º–≤–æ–ª—É
 */
// export function getRestrictedCells(
//   board: CellValue[], 
//   boardSize: BoardSize, 
//   currentPlayer: Player,
//   firstPlayer: Player // –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
// ): RestrictedCells {
//   // –û–±–º–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è 4√ó4
//   if (boardSize !== 4) return [];
  
//   // –û–±–º–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∏–º–≤–æ–ª—É)
//   if (currentPlayer !== firstPlayer) return [];
  
//   // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—Ä—É–≥–∏–π —Ö—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
//   const firstPlayerMoves = board.filter(cell => cell === firstPlayer).length;
//   if (firstPlayerMoves !== 1) return []; // –Ω–µ –¥—Ä—É–≥–∏–π —Ö—ñ–¥
  
//   // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É
//   const firstMovePosition = board.findIndex(cell => cell === firstPlayer);
//   if (firstMovePosition === -1) return [];
  
//   // –û—Ç—Ä–∏–º—É—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ
//   return getAdjacentCells(firstMovePosition, boardSize)
//     .filter(index => board[index] === '');
// }

// export function getRestrictedCells(
//   board: CellValue[], 
//   boardSize: BoardSize, 
//   currentPlayer: Player,
//   firstPlayer: Player
// ): RestrictedCells {
//   // –û–±–º–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è 4√ó4
//   if (boardSize !== 4) return [];
  
//   // –û–±–º–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
//   if (currentPlayer !== firstPlayer) return [];
  
//   // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—Ä—É–≥–∏–π —Ö—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
//   const firstPlayerMoves = board.filter(cell => cell === firstPlayer).length;
//   if (firstPlayerMoves !== 1) return []; // –Ω–µ –¥—Ä—É–≥–∏–π —Ö—ñ–¥
  
//   // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É
//   const firstMovePosition = board.findIndex(cell => cell === firstPlayer);
//   if (firstMovePosition === -1) return [];
  
//   const { row: firstRow, col: firstCol } = getRowCol(firstMovePosition, boardSize);
//   const restrictedCells: number[] = [];
  
//   // –í—Å—ñ 8 –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É
//   const directions = [
//     [-1, -1], [-1, 0], [-1, 1],  // –≤–≥–æ—Ä—É-–ª—ñ–≤–æ, –≤–≥–æ—Ä—É, –≤–≥–æ—Ä—É-–ø—Ä–∞–≤–æ
//     [0, -1],           [0, 1],   // –ª—ñ–≤–æ, –ø—Ä–∞–≤–æ
//     [1, -1],  [1, 0],  [1, 1]    // –≤–Ω–∏–∑-–ª—ñ–≤–æ, –≤–Ω–∏–∑, –≤–Ω–∏–∑-–ø—Ä–∞–≤–æ
//   ];
  
//   for (const [deltaRow, deltaCol] of directions) {
//     const adjacentRow = firstRow + deltaRow;
//     const adjacentCol = firstCol + deltaCol;
    
//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏
//     if (adjacentRow >= 0 && adjacentRow < boardSize && 
//         adjacentCol >= 0 && adjacentCol < boardSize) {
      
//       const adjacentIndex = getIndex(adjacentRow, adjacentCol, boardSize);
      
//       // –Ø–∫—â–æ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
//       if (board[adjacentIndex] !== '') continue;
      
//       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ —Ç–æ–º—É –∂ –Ω–∞–ø—Ä—è–º–∫—É
//       const nextRow = adjacentRow + deltaRow;
//       const nextCol = adjacentCol + deltaCol;
      
//       // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏ —ñ –≤—ñ–ª—å–Ω–∞ - —Ü–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
//       if (nextRow >= 0 && nextRow < boardSize && 
//           nextCol >= 0 && nextCol < boardSize) {
        
//         const nextIndex = getIndex(nextRow, nextCol, boardSize);
        
//         // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è - –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å—É—Å—ñ–¥–Ω—é
//         if (board[nextIndex] === '') {
//           restrictedCells.push(adjacentIndex);
//         }
//       }
//       // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞ –º–µ–∂–∞–º–∏ –¥–æ—à–∫–∏ - –¥–æ–∑–≤–æ–ª–∏—Ç–∏ (–∫—Ä–∞–π –¥–æ—à–∫–∏)
//     }
//   }
  
//   return restrictedCells;
// }

// export function getRestrictedCells(
//   board: CellValue[], 
//   boardSize: BoardSize, 
//   currentPlayer: Player,
//   firstPlayer: Player
// ): RestrictedCells {
//   // –û–±–º–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è 4√ó4
//   if (boardSize !== 4) return [];
  
//   // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ö–æ–¥–∏ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
//   const firstPlayerMoves = board.filter(cell => cell === firstPlayer).length;
//   const secondPlayer = getOppositePlayer(firstPlayer);
//   const secondPlayerMoves = board.filter(cell => cell === secondPlayer).length;
  
//   // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—Ä—É–≥–∏–π —Ö—ñ–¥ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –∑ –≥—Ä–∞–≤—Ü—ñ–≤
//   const isSecondMoveForFirst = currentPlayer === firstPlayer && firstPlayerMoves === 1;
//   const isSecondMoveForSecond = currentPlayer === secondPlayer && secondPlayerMoves === 1;
  
//   if (!isSecondMoveForFirst && !isSecondMoveForSecond) return [];
  
//   // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
//   const firstMovePosition = board.findIndex(cell => cell === currentPlayer);
//   if (firstMovePosition === -1) return [];
  
//   const { row: firstRow, col: firstCol } = getRowCol(firstMovePosition, boardSize);
//   const restrictedCells: number[] = [];
  
//   // –í—Å—ñ 8 –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É
//   const directions = [
//     [-1, -1], [-1, 0], [-1, 1],  // –≤–≥–æ—Ä—É-–ª—ñ–≤–æ, –≤–≥–æ—Ä—É, –≤–≥–æ—Ä—É-–ø—Ä–∞–≤–æ
//     [0, -1],           [0, 1],   // –ª—ñ–≤–æ, –ø—Ä–∞–≤–æ
//     [1, -1],  [1, 0],  [1, 1]    // –≤–Ω–∏–∑-–ª—ñ–≤–æ, –≤–Ω–∏–∑, –≤–Ω–∏–∑-–ø—Ä–∞–≤–æ
//   ];
  
//   for (const [deltaRow, deltaCol] of directions) {
//     const adjacentRow = firstRow + deltaRow;
//     const adjacentCol = firstCol + deltaCol;
    
//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏
//     if (adjacentRow >= 0 && adjacentRow < boardSize && 
//         adjacentCol >= 0 && adjacentCol < boardSize) {
      
//       const adjacentIndex = getIndex(adjacentRow, adjacentCol, boardSize);
      
//       // –Ø–∫—â–æ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
//       if (board[adjacentIndex] !== '') continue;
      
//       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ —Ç–æ–º—É –∂ –Ω–∞–ø—Ä—è–º–∫—É
//       const nextRow = adjacentRow + deltaRow;
//       const nextCol = adjacentCol + deltaCol;
      
//       // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏ —ñ –≤—ñ–ª—å–Ω–∞ - —Ü–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
//       if (nextRow >= 0 && nextRow < boardSize && 
//           nextCol >= 0 && nextCol < boardSize) {
        
//         const nextIndex = getIndex(nextRow, nextCol, boardSize);
        
//         // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è - –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å—É—Å—ñ–¥–Ω—é
//         if (board[nextIndex] === '') {
//           restrictedCells.push(adjacentIndex);
//         }
//       }
//       // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞ –º–µ–∂–∞–º–∏ –¥–æ—à–∫–∏ - –¥–æ–∑–≤–æ–ª–∏—Ç–∏ (–∫—Ä–∞–π –¥–æ—à–∫–∏)
//     }
//   }
  
//   return restrictedCells;
// }

export function getRestrictedCells(
  board: CellValue[], 
  boardSize: BoardSize, 
  currentPlayer: Player,
  firstPlayer: Player
): RestrictedCells {
  // –û–±–º–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è 4√ó4
  if (boardSize !== 4) return [];
  
  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ö–æ–¥–∏ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  const firstPlayerMoves = board.filter(cell => cell === firstPlayer).length;
  const secondPlayer = getOppositePlayer(firstPlayer);
  const secondPlayerMoves = board.filter(cell => cell === secondPlayer).length;
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—Ä—É–≥–∏–π —Ö—ñ–¥ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –∑ –≥—Ä–∞–≤—Ü—ñ–≤
  const isSecondMoveForFirst = currentPlayer === firstPlayer && firstPlayerMoves === 1;
  const isSecondMoveForSecond = currentPlayer === secondPlayer && secondPlayerMoves === 1;
  
  if (!isSecondMoveForFirst && !isSecondMoveForSecond) return [];
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  const firstMovePosition = board.findIndex(cell => cell === currentPlayer);
  if (firstMovePosition === -1) return [];
  
  const { row: firstRow, col: firstCol } = getRowCol(firstMovePosition, boardSize);
  const restrictedCells: number[] = [];
  
  // –í—Å—ñ 8 –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É
  const directions = [
    [-1, -1], [-1, 0], [-1, 1],  // –≤–≥–æ—Ä—É-–ª—ñ–≤–æ, –≤–≥–æ—Ä—É, –≤–≥–æ—Ä—É-–ø—Ä–∞–≤–æ
    [0, -1],           [0, 1],   // –ª—ñ–≤–æ, –ø—Ä–∞–≤–æ
    [1, -1],  [1, 0],  [1, 1]    // –≤–Ω–∏–∑-–ª—ñ–≤–æ, –≤–Ω–∏–∑, –≤–Ω–∏–∑-–ø—Ä–∞–≤–æ
  ];
  
  for (const [deltaRow, deltaCol] of directions) {
    const adjacentRow = firstRow + deltaRow;
    const adjacentCol = firstCol + deltaCol;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏
    if (adjacentRow >= 0 && adjacentRow < boardSize && 
        adjacentCol >= 0 && adjacentCol < boardSize) {
      
      const adjacentIndex = getIndex(adjacentRow, adjacentCol, boardSize);
      
      // –Ø–∫—â–æ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
      if (board[adjacentIndex] !== '') continue;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ —Ç–æ–º—É –∂ –Ω–∞–ø—Ä—è–º–∫—É
      const nextRow = adjacentRow + deltaRow;
      const nextCol = adjacentCol + deltaCol;
      
      // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏ —ñ –≤—ñ–ª—å–Ω–∞ - —Ü–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
      if (nextRow >= 0 && nextRow < boardSize && 
          nextCol >= 0 && nextCol < boardSize) {
        
        const nextIndex = getIndex(nextRow, nextCol, boardSize);
        
        // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è - –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å—É—Å—ñ–¥–Ω—é
        if (board[nextIndex] === '') {
          // üî• –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø 1: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ª—ñ–Ω—ñ—è –º–∞—î –¥–≤—ñ –∑–∞–π–Ω—è—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
          const lineCells = [firstMovePosition, adjacentIndex, nextIndex];
          let occupiedCount = 0;
          
          for (const cellIndex of lineCells) {
            if (board[cellIndex] !== '') {
              occupiedCount++;
            }
          }
          
          // –Ø–∫—â–æ –≤ –ª—ñ–Ω—ñ—ó –≤–∂–µ –¥–≤—ñ –∑–∞–π–Ω—è—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ - –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Ö—ñ–¥
          if (occupiedCount === 2) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ
          }
          
          // üî• –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø 2: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ö—ñ–¥ –±–ª–æ–∫—É—î –≤–∏–≥—Ä–∞—à–Ω—É –ø–æ–∑–∏—Ü—ñ—é
          if (currentPlayer === secondPlayer && secondPlayerMoves === 1) {
            const winningConditions = generateWinningConditions(boardSize);
            
            let allowsBlocking = false;
            
            for (const condition of winningConditions) {
              if (condition.includes(adjacentIndex)) {
                let firstPlayerCount = 0;
                let emptyCount = 0;
                
                for (const cellIndex of condition) {
                  if (board[cellIndex] === firstPlayer) {
                    firstPlayerCount++;
                  } else if (board[cellIndex] === '') {
                    emptyCount++;
                  }
                }
                
                // –Ø–∫—â–æ –ø–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å –º–æ–∂–µ –≤–∏–≥—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ö–æ–¥–æ–º
                if (firstPlayerCount === 2 && emptyCount === 1) {
                  allowsBlocking = true;
                  break;
                }
              }
            }
            
            // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ö—ñ–¥, —è–∫—â–æ –≤—ñ–Ω –±–ª–æ–∫—É—î –≤–∏–≥—Ä–∞—à–Ω—É –ø–æ–∑–∏—Ü—ñ—é
            if (allowsBlocking) {
              continue;
            }
          }
          
          restrictedCells.push(adjacentIndex);
        }
      }
    }
  }
  
  return restrictedCells;
}

/**
 * –í–∞–ª—ñ–¥—É—î —á–∏ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥ –≤ –¥–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
 * –û–ù–û–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä firstPlayer
 */
export function validateMove(
  board: CellValue[],
  cellIndex: CellIndex,
  player: Player,
  boardSize: BoardSize,
  firstPlayer: Player // –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
): MoveValidation {
  // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
  if (board[cellIndex] !== '') {
    return {
      isValid: false,
      reason: 'occupied'
    };
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
  const restrictedCells = getRestrictedCells(board, boardSize, player, firstPlayer);
  
 // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –æ–±–º–µ–∂–µ–Ω–∞
 if (restrictedCells.includes(cellIndex)) {
  return {
    isValid: false,
    reason: 'restricted',
    restrictedCells
  };
}

return { isValid: true };
}

/**
 * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
 * –û–ù–û–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä firstPlayer
 */
// export function getRestrictionInfo(
//   board: CellValue[],
//   boardSize: BoardSize,
//   currentPlayer: Player,
//   firstPlayer: Player // –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
// ): RestrictionInfo {
//   const restrictedCells = getRestrictedCells(board, boardSize, currentPlayer, firstPlayer);
  
//   if (restrictedCells.length === 0) {
//     return {
//       hasRestrictions: false,
//       restrictedCells: [],
//       reasonDescription: '',
//       affectedPlayer: null
//     };
//   }
  
//   return {
//     hasRestrictions: true,
//     restrictedCells,
//     reasonDescription: `–î—Ä—É–≥–∏–π —Ö—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è (${firstPlayer}) –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä—É—á –∑ –ø–µ—Ä—à–∏–º —Ö–æ–¥–æ–º`,
//     affectedPlayer: firstPlayer
//   };
// }

// export function getRestrictionInfo(
//   board: CellValue[],
//   boardSize: BoardSize,
//   currentPlayer: Player,
//   firstPlayer: Player
// ): RestrictionInfo {
//   const restrictedCells = getRestrictedCells(board, boardSize, currentPlayer, firstPlayer);
  
//   if (restrictedCells.length === 0) {
//     return {
//       hasRestrictions: false,
//       restrictedCells: [],
//       reasonDescription: '',
//       affectedPlayer: null
//     };
//   }
  
//   return {
//     hasRestrictions: true,
//     restrictedCells,
//     reasonDescription: `–î—Ä—É–≥–∏–π —Ö—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è (${firstPlayer}) –Ω–µ –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª—ñ–Ω—ñ—é –∑ 3 –≤—ñ–ª—å–Ω–∏–º–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ –ø—ñ–¥—Ä—è–¥`,
//     affectedPlayer: firstPlayer
//   };
// }

// export function getRestrictionInfo(
//   board: CellValue[],
//   boardSize: BoardSize,
//   currentPlayer: Player,
//   firstPlayer: Player
// ): RestrictionInfo {
//   const restrictedCells = getRestrictedCells(board, boardSize, currentPlayer, firstPlayer);
  
//   if (restrictedCells.length === 0) {
//     return {
//       hasRestrictions: false,
//       restrictedCells: [],
//       reasonDescription: '',
//       affectedPlayer: null
//     };
//   }
  
//   // –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫–∏–π –≥—Ä–∞–≤–µ—Ü—å –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è
//   const secondPlayer = getOppositePlayer(firstPlayer);
//   const firstPlayerMoves = board.filter(cell => cell === firstPlayer).length;
//   const secondPlayerMoves = board.filter(cell => cell === secondPlayer).length;
  
//   let reasonDescription = '';
//   if (currentPlayer === firstPlayer && firstPlayerMoves === 1) {
//     reasonDescription = `–î—Ä—É–≥–∏–π —Ö—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è (${firstPlayer}) –Ω–µ –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª—ñ–Ω—ñ—é –∑ 3 –≤—ñ–ª—å–Ω–∏–º–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ –ø—ñ–¥—Ä—è–¥`;
//   } else if (currentPlayer === secondPlayer && secondPlayerMoves === 1) {
//     reasonDescription = `–î—Ä—É–≥–∏–π —Ö—ñ–¥ –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è (${secondPlayer}) –Ω–µ –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª—ñ–Ω—ñ—é –∑ 3 –≤—ñ–ª—å–Ω–∏–º–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ –ø—ñ–¥—Ä—è–¥`;
//   }
  
//   return {
//     hasRestrictions: true,
//     restrictedCells,
//     reasonDescription,
//     affectedPlayer: currentPlayer
//   };
// }

export function getRestrictionInfo(
  board: CellValue[],
  boardSize: BoardSize,
  currentPlayer: Player,
  firstPlayer: Player,
  language: Language,
): RestrictionInfo {
  const restrictedCells = getRestrictedCells(board, boardSize, currentPlayer, firstPlayer);
  console.log('üåê getRestrictionInfo –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –º–æ–≤–æ—é:', language); // DEBUG
  console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏:', translations);
  console.log('üî§ –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –º–æ–≤–∏:', translations[language]);
  console.log('üîç –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –æ–±–º–µ–∂–µ–Ω—å:', translations[language]?.restrictions);
  
  if (restrictedCells.length === 0) {
    return {
      hasRestrictions: false,
      restrictedCells: [],
      reasonDescription: '',
      affectedPlayer: null
    };
  }
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫–∏–π –≥—Ä–∞–≤–µ—Ü—å –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è
  const secondPlayer = getOppositePlayer(firstPlayer);
  const firstPlayerMoves = board.filter(cell => cell === firstPlayer).length;
  const secondPlayerMoves = board.filter(cell => cell === secondPlayer).length;

  let reasonDescription = '';
  if (currentPlayer === firstPlayer && firstPlayerMoves === 1) {
    reasonDescription = translations[language].restrictions.firstPlayerSecondMove.replace('{player}', firstPlayer);
  } else if (currentPlayer === secondPlayer && secondPlayerMoves === 1) {
    reasonDescription = translations[language].restrictions.secondPlayerSecondMove.replace('{player}', secondPlayer);
  } else {
    console.log('‚ö†Ô∏è –ù–µ –≤—Ö–æ–¥–∏–º–æ –≤ –∂–æ–¥–Ω—É —É–º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É');
  }
  

  return {
    hasRestrictions: true,
    restrictedCells,
    reasonDescription,
    affectedPlayer: currentPlayer
  };
}

/**
 * –û—Ç—Ä–∏–º—É—î –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –¥–æ—à–∫–∏
 * –û–ù–û–í–õ–ï–ù–û: restrictionPlayer —Ç–µ–ø–µ—Ä –º–æ–∂–µ –±—É—Ç–∏ –±—É–¥—å-—è–∫–∏–π –ø–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
 */
export function getGameRules(boardSize: BoardSize, firstPlayer?: Player): GameRules {
  return {
    boardSize,
    hasFirstMoveRestriction: boardSize === 4,
    restrictionPlayer: boardSize === 4 ? firstPlayer || null : null,
    restrictionMove: boardSize === 4 ? 2 : null
  };
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥ –¥—Ä—É–≥–∏–º —Ö–æ–¥–æ–º –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
 * –û–ù–û–í–õ–ï–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
 */
export function isSecondMoveForFirstPlayer(
  board: CellValue[], 
  currentPlayer: Player, 
  firstPlayer: Player
): boolean {
  return currentPlayer === firstPlayer && 
         board.filter(cell => cell === firstPlayer).length === 1;
}

/**
 * –û—Ç—Ä–∏–º–∞—î –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ–≥–æ —Ö–æ–¥—É –¥–ª—è –≥—Ä–∞–≤—Ü—è
 */
export function getFirstMovePosition(board: CellValue[], player: Player): CellIndex | null {
  const position = board.findIndex(cell => cell === player);
  return position === -1 ? null : position;
}

/**
 * –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –æ–±–º–µ–∂–µ–Ω—å
 * –û–ù–û–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä firstPlayer
 */
export function getAvailableMovesWithRestrictions(
  board: CellValue[],
  boardSize: BoardSize,
  currentPlayer: Player,
  firstPlayer: Player // –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
): CellIndex[] {
  const restrictedCells = getRestrictedCells(board, boardSize, currentPlayer, firstPlayer);
  
  return board
    .map((cell, index) => {
      // –ö–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—è
      if (cell !== '') return -1;
      
      // –ö–ª—ñ—Ç–∏–Ω–∫–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω–æ—é
      if (restrictedCells.includes(index)) return -1;
      
      return index;
    })
    .filter(index => index !== -1);
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ö—ñ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö –ø—Ä–∞–≤–∏–ª
 * –û–ù–û–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä firstPlayer
 */
export function isValidMoveWithRestrictions(
  board: CellValue[], 
  index: number, 
  player: Player,
  boardSize: BoardSize,
  firstPlayer: Player // –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
): boolean {
  const validation = validateMove(board, index, player, boardSize, firstPlayer);
  return validation.isValid;
}

/**
 * Debug —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
 * –û–ù–û–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä firstPlayer
 */
export function logRestrictedCells(
  board: CellValue[], 
  boardSize: BoardSize, 
  currentPlayer: Player,
  firstPlayer: Player // –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
): void {
  const restrictedCells = getRestrictedCells(board, boardSize, currentPlayer, firstPlayer);
  
  if (restrictedCells.length === 0) {
    console.log(`üü¢ –ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –≥—Ä–∞–≤—Ü—è ${currentPlayer} (–ø–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å: ${firstPlayer})`);
    return;
  }
  
  console.log(`üî¥ –û–±–º–µ–∂–µ–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è ${currentPlayer} (–ø–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å: ${firstPlayer}):`, restrictedCells);
  console.log('–î–æ—à–∫–∞ –∑ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è–º –æ–±–º–µ–∂–µ–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫:');
  
  for (let row = 0; row < boardSize; row++) {
    const rowData = [];
    for (let col = 0; col < boardSize; col++) {
      const index = row * boardSize + col;
      const cell = board[index];
      
      if (cell !== '') {
        rowData.push(cell); // X –∞–±–æ O
      } else if (restrictedCells.includes(index)) {
        rowData.push('‚ùå'); // –æ–±–º–µ–∂–µ–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
      } else {
        rowData.push('¬∑'); // –ø–æ—Ä–æ–∂–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
      }
    }
    console.log(rowData.join(' | '));
  }
  console.log('‚ùå - –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏, ¬∑ - –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏');
}