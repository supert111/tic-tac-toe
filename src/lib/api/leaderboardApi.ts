//tic-tac-toe\src\utils\api\leaderboardApi.ts
// –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö
import { LeaderboardPlayer } from '@/types/game';

// –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–µ—à –≤–≥–æ—Ä—ñ —Ñ–∞–π–ª—É
const apiCache = new Map();
const CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥

export interface LeaderboardEntry {
  userId: number;
  username: string;
  walletAddress: string;
  score: number; 
  gameId: number;
  rank?: number;
}

export interface LeaderboardResponse {
  data: LeaderboardEntry[];
}

export interface PlayerStatsResponse {
  hasUsername: boolean;
  user?: {
    userId: number;
    username: string;
    walletAddress: string;
  };
  stats?: {
    score: number;
    rank: number;
  };
}

export const getLeaderboard = async (gameId: number = 217): Promise<LeaderboardResponse> => {
  const cacheKey = `leaderboard-${gameId}`;
  const cached = apiCache.get(cacheKey);
  
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    return cached.data;
  }

  try {
    const response = await fetch(`/api/proxy-leaderboard?gameId=${gameId}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
    apiCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });
    
    return result;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Å–∫–æ—Ä–∞
function isRecentlyActive(userId: number, currentScore: number): boolean {
  const storageKey = `player_${userId}_activity`;
  const stored = localStorage.getItem(storageKey);
  const now = Date.now();
  
  if (!stored) {
    // –ü–µ—Ä—à–∏–π —Ä–∞–∑ - –∑–∞–ø–∏—Å–∞—Ç–∏ —ñ –≤–≤–∞–∂–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º
    localStorage.setItem(storageKey, JSON.stringify({
      score: currentScore,
      timestamp: now
    }));
    return true;
  }
  
  const { score: prevScore, timestamp } = JSON.parse(stored);
  
  if (currentScore > prevScore) {
    // –°–∫–æ—Ä –∑–±—ñ–ª—å—à–∏–≤—Å—è = –∞–∫—Ç–∏–≤–Ω–∏–π
    localStorage.setItem(storageKey, JSON.stringify({
      score: currentScore,
      timestamp: now
    }));
    return true;
  }
  
  // –°–∫–æ—Ä –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∞—Å (15 —Ö–≤–∏–ª–∏–Ω)
  return (now - timestamp) < 15 * 60 * 1000;
}

// –ì–æ–ª–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó API
export async function getGlobalLeaderboard(): Promise<LeaderboardEntry[]> {
  const cacheKey = 'global-leaderboard-v1';
  const cached = apiCache.get(cacheKey);
  
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —è–∫—â–æ –≤–æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    return cached.data;
  }

  try {
    // const response = await fetch('https://monad-games-id-site.vercel.app/api/leaderboard');
    const response = await fetch('/api/proxy/leaderboard?gameId=217&sortBy=scores');
    if (!response.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
    }
    
    const data: LeaderboardResponse = await response.json();
    const result = data.data || [];
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
    apiCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

  return result; // –ó–º—ñ–Ω–µ–Ω–æ –∑ data.leaderboard –Ω–∞ data.data
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
    throw error;
  }
}

export async function getPlayerStats(walletAddress: string): Promise<PlayerStatsResponse> {
  try {
    const response = await fetch(
      `https://monad-games-id-site.vercel.app/api/check-wallet?wallet=${walletAddress}`
    );
    
    if (!response.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è:', error);
    throw error;
  }
}

export function convertToPlayerFormat(apiData: LeaderboardEntry[]): LeaderboardPlayer[] {
  return apiData.map((player, index) => {
    return {
      id: index + 1,
      name: player.username || `–ì—Ä–∞–≤–µ—Ü—å ${player.rank || index + 1}`,
      wins: Math.floor(player.score / 10),
      losses: Math.max(0, (player.score || 0) - Math.floor(player.score / 10)),
      draws: 0,
      points: player.score || 0,
      winRate: player.score > 0 ? Math.min(100, (Math.floor(player.score / 10) / Math.max(1, player.score)) * 100) : 0,
      streak: Math.random() > 0.5 ? Math.floor(Math.random() * 10) : -Math.floor(Math.random() * 5),
      rank: player.rank || index + 1,
      lastActive: isRecentlyActive(player.userId, player.score) 
        ? new Date().toISOString() 
        : new Date(Date.now() - 16 * 60 * 1000).toISOString(),
      wallet: player.walletAddress || '–ù–µ–≤—ñ–¥–æ–º–æ'
    };
  });
}

// function getAvatarByRank(rank: number): string {
//   if (rank === 1) return 'üëë';
//   if (rank === 2) return 'üî•';
//   if (rank === 3) return '‚ö°';
//   const avatars = ['üéØ', 'üöÄ', 'üíé', 'üß†', 'üåü', 'üèÜ'];
//   return avatars[rank % avatars.length];
// }