'use client';

import { useState } from 'react';

export default function ChatSection() {
  const [messages, setMessages] = useState([
    { id: 1, user: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä_–ö—Ä—É—Ç–∏–π', message: '–ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º! –ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏! üéÆ', time: '15:30', avatar: 'üëë' },
    { id: 2, user: '–ú–∞—Ä—ñ—è_–ü–µ—Ä–µ–º–æ–∂–Ω–∏—Ü—è', message: '–î–∞–≤–∞–π—Ç–µ –∑—ñ–≥—Ä–∞—î–º–æ —Ç—É—Ä–Ω—ñ—Ä!', time: '15:32', avatar: 'üî•' },
    { id: 3, user: '–Ü–≤–∞–Ω_–°—Ç—Ä–∞—Ç–µ–≥', message: '–•—Ç–æ –≥–æ—Ç–æ–≤–∏–π –¥–æ 4x4? üß†', time: '15:35', avatar: 'üß†' },
    { id: 4, user: '–¢–µ—Ç—è–Ω–∞_–ë–ª–∏—Å–∫–∞–≤–∫–∞', message: '–Ø –≤ –≥—Ä—ñ! ‚ö°', time: '15:37', avatar: '‚ö°' },
  ]);
  const [newMessage, setNewMessage] = useState('');

  const handleSendMessage = () => {
    if (newMessage.trim()) {
      const message = {
        id: messages.length + 1,
        user: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä_–ö—Ä—É—Ç–∏–π', // –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        message: newMessage.trim(),
        time: new Date().toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' }),
        avatar: 'üëë'
      };
      setMessages([...messages, message]);
      setNewMessage('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="h-full flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç—É */}
      <div className="bg-white/10 rounded-xl p-3 mb-4">
        <h3 className="font-semibold text-center">üí¨ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç</h3>
        <div className="text-xs text-center text-white/60 mt-1">
          –û–Ω–ª–∞–π–Ω: 12 –≥—Ä–∞–≤—Ü—ñ–≤
        </div>
      </div>

      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
      <div className="flex-1 bg-white/10 rounded-xl p-3 mb-4 overflow-y-auto max-h-64">
        <div className="space-y-3">
          {messages.map((msg) => (
            <div key={msg.id} className="flex gap-2">
              <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center text-sm flex-shrink-0">
                {msg.avatar}
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1">
                  <span className="font-medium text-sm truncate">{msg.user}</span>
                  <span className="text-xs text-white/50">{msg.time}</span>
                </div>
                <div className="text-sm text-white/80 break-words">{msg.message}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥—É */}
      <div className="bg-white/10 rounded-xl p-3">
        <div className="flex gap-2">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
            className="flex-1 px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-white placeholder-white/50 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400"
            maxLength={200}
          />
          <button
            onClick={handleSendMessage}
            disabled={!newMessage.trim()}
            className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 disabled:from-gray-500 disabled:to-gray-600 text-white rounded-lg transition-all duration-200 text-sm font-medium disabled:cursor-not-allowed"
          >
            üì§
          </button>
        </div>
        <div className="text-xs text-white/50 mt-1">
          {newMessage.length}/200
        </div>
      </div>
    </div>
  );
}
