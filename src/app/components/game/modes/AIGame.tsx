'use client';

import { useState, useCallback } from 'react';
import GameCell from '../NotUseGameCell';
import GameModal from '../NotUseGameModal';

type Player = 'X' | 'O';
type Difficulty = 'easy' | 'medium' | 'hard';
type FirstMove = 'player' | 'ai' | 'random';
type GameState = 'setup' | 'playing' | 'finished';

interface AIGameProps {
  onBack?: () => void;
}

export default function AIGame({ onBack }: AIGameProps) {
  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏
  const [boardSize, setBoardSize] = useState(3);
  const [playerSymbol, setPlayerSymbol] = useState<Player>('X');
  const [difficulty, setDifficulty] = useState<Difficulty>('medium');
  const [firstMove, setFirstMove] = useState<FirstMove>('player');
  
  // –°—Ç–∞–Ω –≥—Ä–∏
  const [gameState, setGameState] = useState<GameState>('setup');
  const [gameBoard, setGameBoard] = useState<string[]>([]);
  const [currentPlayer, setCurrentPlayer] = useState<Player>('X');
  const [gameActive, setGameActive] = useState(true);
  const [winningConditions, setWinningConditions] = useState<number[][]>([]);
  const [winningLine, setWinningLine] = useState<number[]>([]);
  const [aiThinking, setAiThinking] = useState(false);
  
  // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
  const [showModal, setShowModal] = useState(false);
  const [modalTitle, setModalTitle] = useState('');
  const [modalMessage, setModalMessage] = useState('');

  const aiSymbol: Player = playerSymbol === 'X' ? 'O' : 'X';

  // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏
  const generateWinningConditions = useCallback((size: number): number[][] => {
    const conditions: number[][] = [];
    
    // –†—è–¥–∫–∏
    for (let row = 0; row < size; row++) {
      for (let col = 0; col <= size - 3; col++) {
        conditions.push([
          row * size + col,
          row * size + col + 1,
          row * size + col + 2
        ]);
      }
    }
    
    // –°—Ç–æ–≤–ø—Ü—ñ
    for (let col = 0; col < size; col++) {
      for (let row = 0; row <= size - 3; row++) {
        conditions.push([
          row * size + col,
          (row + 1) * size + col,
          (row + 2) * size + col
        ]);
      }
    }
    
    // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ (–∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    for (let row = 0; row <= size - 3; row++) {
      for (let col = 0; col <= size - 3; col++) {
        conditions.push([
          row * size + col,
          (row + 1) * size + col + 1,
          (row + 2) * size + col + 2
        ]);
      }
    }
    
    // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ)
    for (let row = 0; row <= size - 3; row++) {
      for (let col = 2; col < size; col++) {
        conditions.push([
          row * size + col,
          (row + 1) * size + col - 1,
          (row + 2) * size + col - 2
        ]);
      }
    }
    
    return conditions;
  }, []);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
  const initializeGame = useCallback(() => {
    const totalCells = boardSize * boardSize;
    const newBoard = new Array(totalCells).fill('');
    const conditions = generateWinningConditions(boardSize);
    
    setGameBoard(newBoard);
    setWinningConditions(conditions);
    setWinningLine([]);
    setGameActive(true);
    setShowModal(false);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º
    let firstPlayer: Player;
    if (firstMove === 'random') {
      firstPlayer = Math.random() < 0.5 ? 'X' : 'O';
    } else if (firstMove === 'player') {
      firstPlayer = playerSymbol;
    } else {
      firstPlayer = aiSymbol;
    }
    
    setCurrentPlayer(firstPlayer);
    
    // –Ø–∫—â–æ AI —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º
    if (firstPlayer === aiSymbol) {
      setTimeout(() => makeAIMove(newBoard, conditions), 1000);
    }
  }, [boardSize, playerSymbol, aiSymbol, firstMove, generateWinningConditions]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  const checkResult = useCallback((board: string[], conditions: number[][]) => {
    let roundWon = false;
    let winLine: number[] = [];

    for (let i = 0; i < conditions.length; i++) {
      const [a, b, c] = conditions[i];
      if (board[a] && board[a] === board[b] && board[a] === board[c]) {
        roundWon = true;
        winLine = [a, b, c];
        break;
      }
    }

    if (roundWon) {
      setWinningLine(winLine);
      setGameActive(false);
      const winner = board[winLine[0]];
      const isPlayerWin = winner === playerSymbol;
      
      setModalTitle(isPlayerWin ? 'üéâ –ü–µ—Ä–µ–º–æ–≥–∞!' : 'üòî –ü–æ—Ä–∞–∑–∫–∞');
      setModalMessage(isPlayerWin 
        ? `–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ –®–Ü –Ω–∞ —Ä—ñ–≤–Ω—ñ "${getDifficultyName(difficulty)}"!`
        : `–®–Ü –ø–µ—Ä–µ–º—ñ–≥ –Ω–∞ —Ä—ñ–≤–Ω—ñ "${getDifficultyName(difficulty)}". –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!`
      );
      setShowModal(true);
      return true;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω—ñ—á–∏—é
    if (!board.includes('')) {
      setGameActive(false);
      setModalTitle('ü§ù –ù—ñ—á–∏—è!');
      setModalMessage('–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –≤–Ω—ñ—á–∏—é. –ù—ñ—Ö—Ç–æ –Ω–µ –ø–µ—Ä–µ–º—ñ–≥!');
      setShowModal(true);
      return true;
    }

    return false;
  }, [playerSymbol, difficulty]);

  // AI –∞–ª–≥–æ—Ä–∏—Ç–º–∏
  const makeAIMove = useCallback((board: string[], conditions: number[][]) => {
    if (!gameActive) return;
    
    setAiThinking(true);
    
    setTimeout(() => {
      let move: number;
      
      switch (difficulty) {
        case 'easy':
          move = getRandomMove(board);
          break;
        case 'medium':
          move = getMediumMove(board, conditions);
          break;
        case 'hard':
          move = getHardMove(board, conditions);
          break;
        default:
          move = getRandomMove(board);
      }
      
      if (move !== -1) {
        const newBoard = [...board];
        newBoard[move] = aiSymbol;
        setGameBoard(newBoard);
        
        if (!checkResult(newBoard, conditions)) {
          setCurrentPlayer(playerSymbol);
        }
      }
      
      setAiThinking(false);
    }, Math.random() * 1000 + 500); // 0.5-1.5 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Ä–æ–∑–¥—É–º–∏
  }, [gameActive, aiSymbol, playerSymbol, difficulty, checkResult]);

  // –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ö—ñ–¥
  const getRandomMove = (board: string[]): number => {
    const availableMoves = board.map((cell, index) => cell === '' ? index : -1).filter(index => index !== -1);
    return availableMoves.length > 0 ? availableMoves[Math.floor(Math.random() * availableMoves.length)] : -1;
  };

  // –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å - –±–ª–æ–∫—É—î –≥—Ä–∞–≤—Ü—è –∞–±–æ –≤–∏–≥—Ä–∞—î
  const getMediumMove = (board: string[], conditions: number[][]): number => {
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–≥—Ä–∞—Ç–∏
    const winMove = findWinningMove(board, conditions, aiSymbol);
    if (winMove !== -1) return winMove;
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è
    const blockMove = findWinningMove(board, conditions, playerSymbol);
    if (blockMove !== -1) return blockMove;
    
    // –Ü–Ω–∞–∫—à–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ö—ñ–¥
    return getRandomMove(board);
  };

  // –í–∞–∂–∫–∏–π —Ä—ñ–≤–µ–Ω—å - –º—ñ–Ω—ñmax –∞–ª–≥–æ—Ä–∏—Ç–º (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
  const getHardMove = (board: string[], conditions: number[][]): number => {
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–≥—Ä–∞—Ç–∏
    const winMove = findWinningMove(board, conditions, aiSymbol);
    if (winMove !== -1) return winMove;
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è
    const blockMove = findWinningMove(board, conditions, playerSymbol);
    if (blockMove !== -1) return blockMove;
    
    // –ó–∞–π–º–µ–º–æ —Ü–µ–Ω—Ç—Ä —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    const center = Math.floor(boardSize / 2) * boardSize + Math.floor(boardSize / 2);
    if (board[center] === '') return center;
    
    // –ó–∞–π–º–µ–º–æ –∫—É—Ç–∏
    const corners = [0, boardSize - 1, boardSize * (boardSize - 1), boardSize * boardSize - 1];
    const availableCorners = corners.filter(corner => board[corner] === '');
    if (availableCorners.length > 0) {
      return availableCorners[Math.floor(Math.random() * availableCorners.length)];
    }
    
    // –Ü–Ω–∞–∫—à–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ö—ñ–¥
    return getRandomMove(board);
  };

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–∏–≥—Ä–∞—à–Ω–∏–π —Ö—ñ–¥ –∞–±–æ —Ö—ñ–¥ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
  const findWinningMove = (board: string[], conditions: number[][], symbol: Player): number => {
    for (const [a, b, c] of conditions) {
      const line = [board[a], board[b], board[c]];
      const symbolCount = line.filter(cell => cell === symbol).length;
      const emptyCount = line.filter(cell => cell === '').length;
      
      if (symbolCount === 2 && emptyCount === 1) {
        if (board[a] === '') return a;
        if (board[b] === '') return b;
        if (board[c] === '') return c;
      }
    }
    return -1;
  };

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –≥—Ä–∞–≤—Ü—è
  const handleCellClick = (index: number) => {
    if (gameBoard[index] !== '' || !gameActive || currentPlayer !== playerSymbol || aiThinking) return;

    const newBoard = [...gameBoard];
    newBoard[index] = playerSymbol;
    setGameBoard(newBoard);
    
    if (!checkResult(newBoard, winningConditions)) {
      setCurrentPlayer(aiSymbol);
      makeAIMove(newBoard, winningConditions);
    }
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  const getDifficultyName = (diff: Difficulty): string => {
    switch (diff) {
      case 'easy': return '–õ–µ–≥–∫–∞';
      case 'medium': return '–°–µ—Ä–µ–¥–Ω—è';
      case 'hard': return '–í–∞–∂–∫–∞';
      default: return '–ù–µ–≤—ñ–¥–æ–º–∞';
    }
  };

  const getDifficultyColor = (diff: Difficulty): string => {
    switch (diff) {
      case 'easy': return 'from-green-500 to-green-600';
      case 'medium': return 'from-yellow-500 to-yellow-600';
      case 'hard': return 'from-red-500 to-red-600';
      default: return 'from-gray-500 to-gray-600';
    }
  };

  // –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
  const startGame = () => {
    setGameState('playing');
    initializeGame();
  };

  // –ù–æ–≤–∞ –≥—Ä–∞
  const newGame = () => {
    setGameState('setup');
  };

  if (gameState === 'setup') {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-bold text-purple-200">ü§ñ –ì—Ä–∞ –ø—Ä–æ—Ç–∏ –®–Ü</h3>
          {onBack && (
            <button 
              onClick={onBack}
              className="text-white/60 hover:text-white transition-colors"
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
          )}
        </div>
        
        {/* –í–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—É –¥–æ—à–∫–∏ */}
        <div className="bg-white/10 rounded-2xl p-4">
          <h4 className="font-semibold mb-3 text-purple-200">üìê –†–æ–∑–º—ñ—Ä –ø–æ–ª—è</h4>
          <div className="flex gap-2">
            <button 
              onClick={() => setBoardSize(3)}
              className={`flex-1 py-2 px-3 rounded-xl transition-all ${
                boardSize === 3 ? 'bg-purple-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              3√ó3
            </button>
            <button 
              onClick={() => setBoardSize(4)}
              className={`flex-1 py-2 px-3 rounded-xl transition-all ${
                boardSize === 4 ? 'bg-purple-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              4√ó4
            </button>
          </div>
        </div>

        {/* –í–∏–±—ñ—Ä —Ñ—ñ–≥—É—Ä–∏ */}
        <div className="bg-white/10 rounded-2xl p-4">
          <h4 className="font-semibold mb-3 text-purple-200">‚≠ï –í–∞—à–∞ —Ñ—ñ–≥—É—Ä–∞</h4>
          <div className="flex gap-2">
            <button 
              onClick={() => setPlayerSymbol('X')}
              className={`flex-1 py-2 px-3 rounded-xl transition-all ${
                playerSymbol === 'X' ? 'bg-purple-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              X (—Ö—Ä–µ—Å—Ç–∏–∫)
            </button>
            <button 
              onClick={() => setPlayerSymbol('O')}
              className={`flex-1 py-2 px-3 rounded-xl transition-all ${
                playerSymbol === 'O' ? 'bg-purple-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              O (–Ω—É–ª–∏–∫)
            </button>
          </div>
        </div>

        {/* –ü–µ—Ä—à–∏–π —Ö—ñ–¥ */}
        <div className="bg-white/10 rounded-2xl p-4">
          <h4 className="font-semibold mb-3 text-purple-200">üéØ –ü–µ—Ä—à–∏–π —Ö—ñ–¥</h4>
          <div className="space-y-2">
            <label className="flex items-center gap-2 cursor-pointer">
              <input 
                type="radio" 
                name="firstMove" 
                value="player" 
                checked={firstMove === 'player'}
                onChange={(e) => setFirstMove(e.target.value as FirstMove)}
                className="text-purple-500" 
              />
              <span>üôã‚Äç‚ôÇÔ∏è –ì—Ä–∞–≤–µ—Ü—å</span>
            </label>
            <label className="flex items-center gap-2 cursor-pointer">
              <input 
                type="radio" 
                name="firstMove" 
                value="ai" 
                checked={firstMove === 'ai'}
                onChange={(e) => setFirstMove(e.target.value as FirstMove)}
                className="text-purple-500" 
              />
              <span>ü§ñ –ö–æ–º–ø'—é—Ç–µ—Ä</span>
            </label>
            <label className="flex items-center gap-2 cursor-pointer">
              <input 
                type="radio" 
                name="firstMove" 
                value="random" 
                checked={firstMove === 'random'}
                onChange={(e) => setFirstMove(e.target.value as FirstMove)}
                className="text-purple-500" 
              />
              <span>üé≤ –í–∏–ø–∞–¥–∫–æ–≤–æ</span>
            </label>
          </div>
        </div>

        {/* –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å */}
        <div className="bg-white/10 rounded-2xl p-4">
          <h4 className="font-semibold mb-3 text-purple-200">‚ö° –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å</h4>
          <div className="flex gap-2">
            <button 
              onClick={() => setDifficulty('easy')}
              className={`flex-1 py-2 px-3 rounded-xl transition-all text-sm ${
                difficulty === 'easy' ? 'bg-green-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              üòä –õ–µ–≥–∫–∞
            </button>
            <button 
              onClick={() => setDifficulty('medium')}
              className={`flex-1 py-2 px-3 rounded-xl transition-all text-sm ${
                difficulty === 'medium' ? 'bg-yellow-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              üòê –°–µ—Ä–µ–¥–Ω—è
            </button>
            <button 
              onClick={() => setDifficulty('hard')}
              className={`flex-1 py-2 px-3 rounded-xl transition-all text-sm ${
                difficulty === 'hard' ? 'bg-red-500/70' : 'bg-white/10 hover:bg-white/20'
              }`}
            >
              üò§ –í–∞–∂–∫–∞
            </button>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ */}
        <button 
          onClick={startGame}
          className="w-full bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800 py-3 px-6 rounded-2xl font-bold text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300"
        >
          üéÆ –ü–û–ß–ê–¢–ò –ì–†–£
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∏ */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-xl font-bold text-purple-200">ü§ñ –ì—Ä–∞ –ø—Ä–æ—Ç–∏ –®–Ü</h3>
          <div className="text-sm text-white/60">
            –†—ñ–≤–µ–Ω—å: <span className={`font-semibold bg-gradient-to-r ${getDifficultyColor(difficulty)} bg-clip-text text-transparent`}>
              {getDifficultyName(difficulty)}
            </span>
          </div>
        </div>
        <button 
          onClick={newGame}
          className="text-white/60 hover:text-white transition-colors"
        >
          ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        </button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –≥—Ä–∏ */}
      <div className="bg-white/10 rounded-2xl p-4 text-center">
        {aiThinking ? (
          <div className="flex items-center justify-center gap-2">
            <div className="animate-spin w-4 h-4 border-2 border-purple-400 border-t-transparent rounded-full"></div>
            <span className="text-purple-200">–®–Ü –æ–±–¥—É–º—É—î —Ö—ñ–¥...</span>
          </div>
        ) : gameActive ? (
          <div className="text-lg text-purple-200">
            –•—ñ–¥: <span className="font-bold text-purple-300">
              {currentPlayer} ({currentPlayer === playerSymbol ? '–í–∏' : '–®–Ü'})
            </span>
          </div>
        ) : (
          <div className="text-lg text-white/60">
            –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
          </div>
        )}
      </div>
      
      {/* –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ */}
      <div className={`
        grid gap-2 mx-auto bg-gray-900/40 p-3 rounded-2xl relative border border-purple-400/20
        ${boardSize === 3 ? 'grid-cols-3' : 'grid-cols-4'}
      `} style={{
        width: boardSize === 3 ? '220px' : '280px'
      }}>
        {gameBoard.map((cell, index) => (
          <GameCell
            key={index}
            value={cell}
            onClick={() => handleCellClick(index)}
            isWinning={winningLine.includes(index)}
            disabled={!gameActive || currentPlayer !== playerSymbol || aiThinking}
          />
        ))}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è */}
      <div className="flex gap-2">
        <button 
          onClick={initializeGame}
          className="flex-1 bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800 px-4 py-2 rounded-2xl font-bold text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300"
        >
          üîÑ –ù–æ–≤–∞ –≥—Ä–∞
        </button>
        <button 
          onClick={newGame}
          className="px-4 py-2 bg-white/10 hover:bg-white/20 rounded-2xl font-medium text-white transition-all duration-300"
        >
          ‚öôÔ∏è
        </button>
      </div>

      <GameModal 
        show={showModal}
        title={modalTitle}
        message={modalMessage}
        onClose={() => setShowModal(false)}
      />
    </div>
  );
}