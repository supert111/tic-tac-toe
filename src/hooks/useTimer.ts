// hooks/useTimer.ts
// –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞ —Ö—ñ–¥
// ‚úÖ –ì–Ω—É—á–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ —á–∞—Å—É
// ‚úÖ –ü–∞—É–∑–∞/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
// ‚úÖ –ó–≤—É–∫–æ–≤—ñ —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è

import { useState, useEffect, useCallback, useRef } from 'react';

export interface TimerConfig {
  timePerMove: number; // —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Ö—ñ–¥
  totalTime?: number;  // –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≥—Ä–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
  warningThreshold: number; // –∫–æ–ª–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (—Å–µ–∫—É–Ω–¥–∏)
  autoEndMove: boolean; // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ —Ö—ñ–¥ –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ —á–∞—Å—É
}

export interface UseTimerReturn {
  // –°—Ç–∞–Ω —Ç–∞–π–º–µ—Ä–∞
  timeLeft: number;
  totalTimeLeft: number | null;
  isRunning: boolean;
  isWarning: boolean;
  isTimeUp: boolean;
  
  // –î—ñ—ó
  startTimer: () => void;
  pauseTimer: () => void;
  resumeTimer: () => void;
  resetTimer: () => void;
  resetMoveTimer: () => void;
  
  // –£—Ç–∏–ª—ñ—Ç–∏
  formatTime: (seconds: number) => string;
  getTimePercentage: () => number;
}

interface UseTimerOptions {
  config: TimerConfig;
  onTimeUp?: () => void;
  onWarning?: () => void;
  onTick?: (timeLeft: number) => void;
}

export function useTimer({
  config,
  onTimeUp,
  onWarning,
  onTick
}: UseTimerOptions): UseTimerReturn {
  
  const [timeLeft, setTimeLeft] = useState(config.timePerMove);
  const [totalTimeLeft, setTotalTimeLeft] = useState(config.totalTime || null);
  const [isRunning, setIsRunning] = useState(false);
  const [isTimeUp, setIsTimeUp] = useState(false);
  
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const warningTriggeredRef = useRef(false);
  const timeUpTriggeredRef = useRef(false); // –î–û–î–ê–ô–¢–ï –¶–Æ –õ–Ü–ù–Ü–Æ

  // –û—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂—ñ
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∏–π —Ç–∞–π–º–µ—Ä
  useEffect(() => {
    if (!isRunning) {
      console.log('‚è∏Ô∏è –¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª');
      return;
    }
    console.log('üî• –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–π–º–µ—Ä–∞, –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:', timeLeft);

    intervalRef.current = setInterval(() => {
      console.log('‚è∞ –¢—ñ–∫ —Ç–∞–π–º–µ—Ä–∞'); // üîç –î–û–î–ê–ô –¶–ï–ô –õ–û–ì
      setTimeLeft(prev => {
        // const newTime = prev - 1;
        const newTime = Math.max(0, prev - 1); // üî• –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
         // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —á–∞—Å —Ä–µ–∞–ª—å–Ω–æ –∑–º—ñ–Ω–∏–≤—Å—è
      if (newTime !== prev) {
        console.log('‚è∞ –ù–æ–≤–∏–π —á–∞—Å:', newTime);
      }

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ onTick
        onTick?.(newTime);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if (newTime === config.warningThreshold && !warningTriggeredRef.current) {
          warningTriggeredRef.current = true;
          onWarning?.();
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∞—Å—É
        if (newTime <= 0 && !timeUpTriggeredRef.current) {
          timeUpTriggeredRef.current = true;
          setIsTimeUp(true);
          setIsRunning(false);
          // –û—á–∏—â—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
          }
          onTimeUp?.();
          return 0;
        }
        
        return newTime;
      });

      // –ó–º–µ–Ω—à—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≥—Ä–∏ (—è–∫—â–æ —î)
      if (config.totalTime) {
        setTotalTimeLeft(prev => {
          if (prev === null) return null;
          const newTotalTime = prev - 1;
          return newTotalTime <= 0 ? 0 : newTotalTime;
        });
      }
    }, 1000);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isRunning, config.warningThreshold, config.totalTime, onTimeUp, onWarning, onTick, isTimeUp]);

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
  const startTimer = useCallback(() => {
    // –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
    if (isRunning) {
      console.log('‚ö†Ô∏è –¢–∞–π–º–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
      return;
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —è–∫—â–æ —î
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  
    setIsRunning(true);
    setIsTimeUp(false);
    warningTriggeredRef.current = false;
  }, [isRunning]); 

  // –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞
  const pauseTimer = useCallback(() => {
    setIsRunning(false);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);

  // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
  const resumeTimer = useCallback(() => {
    if (!isTimeUp && timeLeft > 0) {
      setIsRunning(true);
    }
  }, [isTimeUp, timeLeft]);

  // –°–∫–∏–¥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ (–≤–µ—Å—å —Ç–∞–π–º–µ—Ä)
  const resetTimer = useCallback(() => {
    setIsRunning(false);
    setTimeLeft(config.timePerMove);
    setTotalTimeLeft(config.totalTime || null);
    setIsTimeUp(false);
    warningTriggeredRef.current = false;
    
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, [config.timePerMove, config.totalTime]);

  // –°–∫–∏–¥–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —Ö–æ–¥—É
  const resetMoveTimer = useCallback(() => {
    console.log('üîÑ resetMoveTimer –≤–∏–∫–ª–∏–∫–∞–Ω–æ'); // –î–û–î–ê–ô–¢–ï –¶–ï–ô –õ–û–ì
    setTimeLeft(config.timePerMove);
    setIsTimeUp(false);
    warningTriggeredRef.current = false;
    timeUpTriggeredRef.current = false; // –î–û–î–ê–ô–¢–ï –¶–Æ –õ–Ü–ù–Ü–Æ
  }, [config.timePerMove]);

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
  const formatTime = useCallback((seconds: number): string => {
    if (seconds < 0) return '0:00';
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    
    if (minutes > 0) {
      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    
    return `0:${remainingSeconds.toString().padStart(2, '0')}`;
  }, []);

  // –í—ñ–¥—Å–æ—Ç–æ–∫ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
  const getTimePercentage = useCallback((): number => {
    return Math.max(0, Math.min(100, (timeLeft / config.timePerMove) * 100));
  }, [timeLeft, config.timePerMove]);

  // –ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
  const isWarning = timeLeft <= config.warningThreshold && timeLeft > 0;

  return {
    // –°—Ç–∞–Ω —Ç–∞–π–º–µ—Ä–∞
    timeLeft,
    totalTimeLeft,
    isRunning,
    isWarning,
    isTimeUp,
    
    // –î—ñ—ó
    startTimer,
    pauseTimer,
    resumeTimer,
    resetTimer,
    resetMoveTimer,
    
    // –£—Ç–∏–ª—ñ—Ç–∏  
    formatTime,
    getTimePercentage
  };
}